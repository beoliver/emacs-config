#+TITLE: Emacs Org Configuration File
#+AUTHOR: Benjamin Edward Oliver
#+EMAIL: benjamin.e.oliver@gmail.com
#+PROPERTY: header-args :tangle init-extended.el :padline yes :comments link

The =#+PROPERTY= header allows us to *tangle* this file and produce an emacs lisp file =init-extended.el=.
The use of the =padline= and =comments= directives allow for navigation back to this file if there are any issues
in the generated code. See [[https://orgmode.org/manual/Extracting-Source-Code.html#Extracting-source-code][here]] for more information.

* Helper Functions

Use =M-x init= to edit this file

#+BEGIN_SRC emacs-lisp
  (defun init ()
    (interactive)
    (find-file "~/.emacs.d/init.org"))
#+END_SRC

Use =M-x zshrc= to edit the .zshrc.org file

#+BEGIN_SRC emacs-lisp
  (defun zshrc ()
    (interactive)
    (find-file "~/.zshrc.org"))
#+END_SRC


* Helper Macros

Create macros that only evaluate the body when we are using a GUI or a terminal

#+BEGIN_SRC emacs-lisp
  (defmacro when-gui (&rest exprs)
    `(when (display-graphic-p)
       ,@exprs))

  (defmacro when-terminal (&rest exprs)
    `(unless (display-graphic-p) ,@exprs))
#+END_SRC


Create macros that only evaulate the body if we are running on a certain OS. this makes the config more portable.

#+BEGIN_SRC emacs-lisp
  (defmacro when-system (system &rest exprs)
    `(when (eq system-type ,system)
       ,@exprs))

  (defmacro when-macosx (&rest exprs)
    `(when-system 'darwin ,@exprs))
#+END_SRC


* General Sanity

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq make-backup-files nil
        auto-save-default nil
        inhibit-splash-screen 0
        ring-bell-function 'ignore
        mouse-wheel-progressive-speed nil)
#+END_SRC


* Mac OS X

To use shell variables

#+BEGIN_SRC emacs-lisp
  (when-macosx
   (setq shell-command-switch "-lc")
   ;; (setq explicit-bash-args '("--login" "-i"))
   )
#+END_SRC


* Paths

#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC

To make life easier with git versioning, we will set the =user-emacs-directory= to be a directory called =user= inside of the existing =user-emacs-directory=. This means that we dont need to add stuff to the =.gitignore= file.

#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory (concat user-emacs-directory "user/"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun set-exec-path (&rest paths)
    "Set the `exec-path` to include any additional dirs."
    (setq exec-path
          (append exec-path paths)))

  (set-exec-path "/usr/local/bin/" "~/bin")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun set-load-path (&rest paths)
    (setq load-path
          (append load-path
                  (mapcar (lambda (fname)
                            (expand-file-name fname user-emacs-directory))
                          paths))))

  (set-load-path "site-lisp" "lisp" "user-packages" "user-settings")
#+END_SRC


* Customizations

We set an explicit file for customized variables. This means that extra data will not be appened to the `init.el` file

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+end_SRC

Create the file if it doesn't exist

#+BEGIN_SRC emacs-lisp
  (if (not (file-exists-p custom-file))
    (with-temp-buffer (write-file custom-file)))
#+END_SRC

We might as well load the customizations straight away

#+BEGIN_SRC emacs-lisp
  (load custom-file)
#+END_SRC


* Packages

#+BEGIN_SRC emacs-lisp
  (setq package-archives
	'(("gnu" . "https://elpa.gnu.org/packages/")
	  ;; ("marmalade" . "https://marmalade-repo.org/packages/")
	  ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

I am using the [[https://github.com/jwiegley/use-package][use-package]] library for loading packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize) ;; is this really the right thing to do?
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

In emacs versions prior to 27 we need to `package-initialize` in order to use `use-package`

#+BEGIN_SRC emacs-lisp
  (when (< emacs-major-version 27)
    (package-initialize)
    (setq package-enable-at-startup nil))
#+END_SRC

I am not actually sure if `eval-when-compile` is required. But the example uses it.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Simple

#+BEGIN_SRC emacs-lisp
    (use-package simple
      :hook ((before-save) . delete-trailing-whitespace)
      :config (global-visual-line-mode 1))
#+END_SRC

** Paredit

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode clojure-mode) . paredit-mode))
#+END_SRC

** Paren

#+BEGIN_SRC emacs-lisp
(use-package paren
  :config (setq show-paren-style 'parenthesis
		show-paren-when-point-inside-paren t
		show-paren-when-point-in-periphery t)
  :hook ((emacs-lisp-mode clojure-mode) . show-paren-mode))
#+END_SRC

** Aggrssive Indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :hook ((emacs-lisp-mode clojure-mode) . aggressive-indent-mode))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    ;; :bind ("TAB" . company-complete)
    :ensure t
    :config
    (setq company-backends '(company-capf)
	  company-idle-delay nil
	  company-minimum-prefix-length 1)
    :hook ((emacs-lisp-mode cider-repl-mode cider-mode intero-mode) . company-mode))
#+END_SRC
*** Company Quickhelp
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :config (company-quickhelp-mode)
    :after (company))
#+END_SRC

** Clojure
*** Clojure Kondo

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo
    :ensure t
    :hook ((clojure-mode) . flycheck-mode))
#+END_SRC

*** Cider

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :bind ("C-c M-b" . cider-repl-clear-buffer)
    :init (setq cider-repl-display-help-banner nil)
    :hook ((clojure-mode) . cider-mode))
#+END_SRC

*** Clojure Mode

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config (require 'flycheck-clj-kondo))
#+END_SRC

*** Clojure Refactor

#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :ensure t
    :hook ((clojure-mode) . (lambda ()
			      (yas-minor-mode 1)
			      (clj-refactor-mode 1))))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package python
    :init (setq python-shell-interpreter "/usr/local/opt/python@3.8/bin/python3.8"))
#+END_SRC

** Org

You can use =< s <tab>= to create an empty code block

When creating source code blocks it is nice to have them auto format when pressing =<tab>=

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init (setq org-src-tab-acts-natively t)
    :config (org-indent-mode 1))
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure t
    :bind ("C-c M-DEL" . (lambda () (interactive)
			   (let ((eshell-buffer-maximum-lines 0))
			     (eshell-truncate-buffer)))))
#+END_SRC

** Ido

   [[https://www.emacswiki.org/emacs/InteractivelyDoThings][Ido]] mode is nice for searching

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :config (ido-mode t))
#+END_SRC


* Scratch Buffer

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC


* Visual

** Theme

#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold t
	    doom-themes-enable-italic t))

    (when-gui
     (load-theme 'doom-spacegrey t))

    (when-terminal
     (load-theme 'doom-nova t))
#+END_SRC

*** Doom Theme names

| Name                 | Light | Dark | Rating | Notes                          |
|----------------------+-------+------+--------+--------------------------------|
| doom-Iosvkem         |       | x    |      5 |                                |
| doom-acario-dark     |       | x    |      3 |                                |
| doom-acario-light    | x     |      |      3 |                                |
| doom-challenger-deep |       | x    |      4 |                                |
| doom-city-lights     |       | x    |      6 |                                |
| doom-dracula         |       | x    |      6 |                                |
| doom-fairy-floss     |       | x    |      1 |                                |
| doom-gruvbox         |       | x    |      4 |                                |
| doom-laserwave       |       | x    |      5 |                                |
| doom-material        |       | x    |      6 |                                |
| doom-molokai         |       | x    |      4 |                                |
| doom-moonlight       |       | x    |      5 |                                |
| doom-nord            |       | x    |      5 |                                |
| doom-nord-light      | x     |      |      7 |                                |
| doom-nova            |       | x    |      4 | works better in terminal       |
| doom-oceanic-next    |       | x    |      5 | org snippets look bad          |
| doom-one             |       | x    |      5 |                                |
| doom-one-light       | x     |      |      4 | snippets hard to read          |
| doom-opera           |       | x    |      5 |                                |
| doom-opera-light     | x     |      |      6 |                                |
| doom-outrun-electric |       | x    |      6 | fun but a bit hard on the eyes |
| doom-palenight       |       | x    |      6 |                                |
| doom-peacock         |       | x    |      5 |                                |
| doom-snazzy          |       | x    |      2 | snippets dont look great       |
| doom-solarized-dark  |       | x    |      6 |                                |
| doom-solarized-light | x     |      |      6 |                                |
| doom-sourcerer       |       | x    |      6 |                                |
| doom-spacegrey       |       | x    |      8 |                                |
| doom-tomorrow-day    | x     |      |      7 | snippet slightly hard to read  |
| doom-tomorrow-night  |       | x    |      8 |                                |
| doom-vibrant         |       | x    |      6 |                                |
| doom-wilmersdorf     |       | x    |      7 |                                |


** Fonts
   #+BEGIN_SRC emacs-lisp
     (when (find-font (font-spec :family "PragmataPro"))
       (set-face-attribute 'default nil :family "PragmataPro" :height 130))
   #+End_SRC


** GUI settings

#+BEGIN_SRC emacs-lisp
  (when-gui
   (menu-bar-mode 1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (set-frame-size (selected-frame) 120 55)
   (set-frame-position (selected-frame) 50 70)
   (setq-default cursor-type 'bar) ;; bar | block
   (setq-default fill-column 80)
   (setq-default line-spacing 2)
   (global-linum-mode t)
   (setq linum-format "%4d")
   (set-frame-parameter nil 'internal-border-width 20)
   (fringe-mode '(50 . 50))
   (set-face-attribute 'fringe nil
		       :foreground (face-foreground 'default)
		       :background (face-background 'default)))
#+END_SRC


** Terminal settings

#+BEGIN_SRC emacs-lisp
  (when-terminal
   (menu-bar-mode -1)
   (tool-bar-mode -1))
#+END_SRC
